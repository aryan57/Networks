******* CONSTANTS *******

T = sleep time, timeout is 2T

P = Probability of dropping of message.
	More P means more dropping of messages

MSG_SIZE = Max size of the buffer sent using r_sendto

SOCK_MRP = The type of the socket we will create
			which is fixed to be SOCK_MRP in our library

MAX_TABLE_SIZE = Maximum table size for the receive table and the unack table

DEBUG = wether you print the extra debug statements or not


******* DATA STRUCTURES *******

typedef struct __UNACK_TABLE
{
	char msg[MSG_SIZE]; /*msg with 8 bytes frame at front*/
	int msg_seq_no; /* Message sequence no., -1 represents this entry is empty */
	time_t last_send_time; /* last send time */
	size_t msg_len; /*size of actual msg + 8 bytes framed at front*/

	/*These things are required when we are retransmitting*/
	int fd; /* sockfd of sender */
	int flags; /* The bitwised ORed flags as in UDP sendto calls */
	struct sockaddr addr; /* Receiver's address */
	socklen_t addr_len; /* for storing length of addr */

} UNACK_TABLE;

typedef struct __RECV_TABLE
{
	int msg_seq_no; /* Message sequence no., -1 represents this entry is empty */
	size_t msg_len; /*size of actual message*/
	char msg[MSG_SIZE]; /*size of actual message*/
	struct sockaddr addr; /* Receiver's address, so that we can fill address in the r_recvfrom calls */

} RECV_TABLE;


typedef struct _pair
{
	int first,second; /* first and second part of pair of integers*/
} pair;



******* FUNCTIONS *******
int r_socket(int __domain,int __type,int __protocol);
/*
	Create a new socket of type TYPE in domain DOMAIN, using
	protocol PROTOCOL. If PROTOCOL is zero, one is chosen automatically.
	Returns a file descriptor for the new socket, or -1 for errors.

	This function opens an UDP socket with the socket call. It also creates the 2
	threads R and S, and allocates initial space for the tables. The parameters to these are
	the same as the normal socket( ) call, except that it will take only SOCK_MRP as the
	socket type.
*/


int r_bind(int __fd,const struct sockaddr * __addr,socklen_t __len);
/*
	Give the socket FD the local address ADDR (which is LEN bytes long).
	On success, zero is returned.  On error, -1 is returned, and errno is set appropriately.

	Binds the socket with some address-port using the bind call.
*/


ssize_t r_sendto(int __fd,const void* __buf,size_t __n,int __flags,const struct sockaddr* __addr,socklen_t __addr_len);
/*
	Send N bytes of BUF on socket FD to peer at address ADDR (which is ADDR_LEN bytes long). Returns the number sent, or -1 for errors.

	sends the message immediately by sendto. It also adds a message sequence
	no. at the beginning of the message and stores the message along with its sequence no.
	and destination address-port in the unacknowledged-message table before sending the
	message. With each entry, there is also a time field that is filled up initially with the
	time of first sending the message.
*/


int r_recvfrom(int __fd,void* buf,size_t __n,int __flags,struct sockaddr* __addr,socklen_t* __addr_len);
/*
	Read N bytes into BUF through socket FD.
	If ADDR is not NULL, fill in *ADDR_LEN bytes of it with tha address of
	the sender, and store the actual size of the address in *ADDR_LEN.
	Returns the number of bytes read or -1 for errors.

	looks up the received-message table to see if any message is already
	received in the underlying UDP socket or not. If yes, it returns the first message and
	deletes that message from the table. If not, it blocks the call. To block the r_recvfrom
	call, we use sleep call to wait for T time and then see again if a message is
	received. r_recvfrom, similar to recvfrom, is a blocking call by default and returns to
	the user only when a message is available.
*/


int r_close(int __fd);
/*
	Close the file descriptor FD.

	closes the socket; kills all threads and frees all memory associated with the
	socket. If any data is there in the received-message table, it is discarded
*/


pair getTransmissions();
/*
	Returns a pair of integers with the first one being the
	total number of transmissions including the retransmits
	for sending the characters and second one being the position
	of first filled entry in the unack table or -1 if unack table
	is empty
*/


int dropMessage(float p);
/*
	This function first generates a random number
	between 0 and 1. If the generated number is < p,
	then the function returns 1, else it returns 0
*/


int add_frame_8_byte(const void* __src_buf,void** __dest_buf,size_t len,int __frame2);
/*
	add the 8 byte frame to the SRC_BUF.
	Returns the sizeof DEST_BUF on success
	or -1 if the new buffer size exceeds MSG_SIZE

	First 4 bytes represents id of msg.
	Next 4 bytes represents type of msg, 1 for ACK and 0 for data.
	Last 100 bytes represents the message.

*/



int filled_position_recv_table();
/*
	Returns the first index of the RECV_TABLE
	where entry is present or -1 if RECV_TABLE
	is empty
*/


int filled_position_unack_table();
/*
	Returns the index of the UNACK_TABLE
	where entry is filled or -1 if UNACK_TABLE
	is empty
*/


int empty_position_unack_table();
/*
	Returns the index of the UNACK_TABLE
	where entry can be filled or -1 if UNACK_TABLE
	is full
*/


void* S_handler(void* arg);
/*
	Handles the thread S
	It sleeps for time (T), and wakes up periodically.
	On waking up, it scans the unacknowledged-message table to see if any of
	the messages timeout period (set to 2T ) is over (from the difference between the time in
	the table entry for a message and the current time). If yes, it retransmits that message and
	resets the time in that entry of the table to the new sending time. If not, no action is taken.
	This is repeated for all messages in the table every time S wakes
*/



void* R_handler( void* arg);
/*
	Handles the thread R. It waits for a message to come in a recvfrom() call.
	When it receives a message, if it is a data message, it stores it in the
	received-message table, and sends an ACK message to the sender. If it is an ACK message
	in response to a previously sent message, it updates the unacknowledged-message table to
	take out the message for which the acknowledgement has arrived.
*/



******* TRANSMISSIONS TABLE *******
Length of string used for testing  = 25
+------------------+---------------------------+-----------------------------+
| Drop probability | Total no of transmissions | Average no of transmissions |
+------------------+---------------------------+-----------------------------+
|             0.05 |                        27 |                        1.08 |
+------------------+---------------------------+-----------------------------+
|              0.1 |                        27 |                        1.08 |
+------------------+---------------------------+-----------------------------+
|             0.15 |                        35 |                         1.4 |
+------------------+---------------------------+-----------------------------+
|              0.2 |                        39 |                        1.56 |
+------------------+---------------------------+-----------------------------+
|             0.25 |                        43 |                        1.72 |
+------------------+---------------------------+-----------------------------+
|              0.3 |                        50 |                           2 |
+------------------+---------------------------+-----------------------------+
|             0.35 |                        54 |                        2.16 |
+------------------+---------------------------+-----------------------------+
|              0.4 |                        66 |                        2.64 |
+------------------+---------------------------+-----------------------------+
|             0.45 |                        70 |                         2.8 |
+------------------+---------------------------+-----------------------------+
|              0.5 |                        79 |                        3.16 |
+------------------+---------------------------+-----------------------------+